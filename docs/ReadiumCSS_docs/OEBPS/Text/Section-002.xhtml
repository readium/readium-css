<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="generator" content="pandoc"/>
  <title>Readium CSS Implementers’ doc</title>
  <link rel="stylesheet" type="text/css" href="../Styles/stylesheet.css"/>
</head>

<body xml:lang="en">
  <section id="quick-start" class="level1">
    <h1>Quickstart</h1>

    <p>[Implementers’ doc]</p>

    <p>Readium CSS is a set of reference stylesheets for EPUB Reading Systems. It provides styles for reflowable text:</p>

    <ul>
      <li>a CSS normalize for EPUB contents;</li>

      <li>paged and scrolled views;</li>

      <li>default styles;</li>

      <li>reading modes (night, sepia, etc.);</li>

      <li>themes;</li>

      <li>user settings.</li>
    </ul>

	<p><strong>Note:</strong> Readium CSS stylesheets were not designed and should not be used for fixed-layout EPUB, nor other file formats like FB2, PRC, Mobi, TEI, etc.</p>

    <section id="important-info" class="level2">
      <h2 id="sigil_toc_id_163">Important info</h2>

	  <p><strong>TL;DR: use the stylesheets in the <code>css/dist</code> folder if you don’t need to customize Readium CSS.</strong> All the flags and variables can then be taken at face value in the docs.</p>

      <ul>
        <li>The <code>src</code> files, which are modules, can’t be used AS-IS. They indeed have to be processed by PostCSS to create <code>dist</code> stylesheets.</li>

        <li>By default, those modules are daisy-chained and compiled into 3 <code>dist</code> stylesheets: 

        <ol>
          <li><code>ReadiumCSS-before.css</code>;</li>

          <li><code>ReadiumCSS-default.css</code> (for unstyled ebooks);</li>

          <li><code>ReadiumCSS-after.css</code>.</li>
        </ol></li>

        <li>We’re currently managing RTL and CJK (including horizontal and vertical writing) scripts using specific <code>dist</code> stylesheets: 

        <ol>
          <li>Right to Left stylesheets are distributed in an <code>rtl</code> folder;</li>

          <li>CJK horizontal stylesheets are distributed in an <code>cjk-horizontal</code> folder;</li>

          <li>CJK vertical stylesheets are distributed in an <code>cjk-vertical</code> folder.</li>
        </ol></li>

        <li>The build process is currently subpar as it has been designed for our default and must be changed entirely if you want to process and use modules directly – which would make sense with HTTP2 for instance.</li>
      </ul>
    </section>

    <section id="how-to" class="level2">
      <h2 id="sigil_toc_id_164">How To</h2>

      <p>Inject ReadiumCSS stylesheets into the <code>&lt;head&gt;</code> of (X)HTML documents.</p>

      <ol>
        <li><code>ReadiumCSS-before.css</code></li>

        <li>Authors’ stylesheet(s) or <code>ReadiumCSS-default.css</code> for unstyled publications</li>

        <li><code>ReadiumCSS-after.css</code></li>
      </ol>

      <p>Check the <a href="../Text/Section-006.xhtml">Stylesheets order doc</a> for further details.</p>

	  <p>For RTL, you would then have to load the stylesheets in the <code>rtl</code> folder. Same for CJK. Check the <a href="../Text/Section-016.xhtml">“Internationalization” doc</a> for guidance.</p>

      <p>By default, we inject all stylesheets on load and rely on custom properties (a.k.a. CSS variables) set on <code>html</code> to apply user settings.</p>
    </section>

    <section id="customize" class="level2">
      <h2 id="sigil_toc_id_165">Customize</h2>

      <p>ReadiumCSS ships with a <code>ReadiumCSS-config.css</code> file you can use to customize it a little bit. It allows implementers to:</p>

      <ol>
        <li>define in which conditions the auto pagination model is used;</li>

        <li>choose selectors for the user settings’ flags.</li>
      </ol>

      <p>In order to provide this customization, we use custom media and custom selectors, which will hopefully become <a href="https://drafts.csswg.org/css-extensions/">standards implemented at some point</a>, but require PostCSS at the moment. Consequently, you’ll have to rebuild all <code>dist</code> stylesheets if you’re changing this file.</p>

      <section id="auto-pagination-model" class="level3">
        <h3 class="sigil_not_in_toc">Auto pagination model</h3>

        <p>The auto pagination model switches from 1 to 2 columns, and vice versa, when the conditions defined in <code>ReadiumCSS-config.css</code> are met. Further details about this model can be found in <a href="../Text/Section-003.xhtml">“Injection and pagination” doc</a>.</p>

        <p>On desktop, <code>--responsive-columns</code> is the <code>min-width</code> at which the model must be used. Default is <code>60em</code>, a relative unit since it is responsive by default and will switch depending on the window’s dimensions and the font size.</p>

        <p>Should you want it never or always applied, you can either define a <code>min-width</code> large or small enough, or remove the media queries entirely in <code>ReadiumCSS-pagination.css</code> and <code>ReadiumCSS-colNumber_pref.css</code>.</p>

        <p>On mobile, <code>--min-device-columns</code> and <code>--max-device-columns</code> is the range of (minimum and maximum) device widths in which the model must be used. We are forcing the orientation in <code>landscape</code>.</p>

        <p>We recommend not trying to apply it in portrait orientation because 2 columns will provide users with quite a terrible reading experience in this configuration.</p>

        <p>Those custom medias may be extended at some point, depending on implementers’ feedbacks and issues.</p>
      </section>

      <section id="flags-for-user-settings" class="level3">
        <h3 class="sigil_not_in_toc">Flags for user settings</h3>

        <p>By default, we are using flags in the form of CSS variables to manage reading modes and user settings. But you might want to customize those flags in order to use custom attributes (<code>data-*</code>) or good old CSS classes.</p>

        <p>A complete list of flags can be found in the <a href="../Text/Section-012.xhtml">User preferences doc</a>.</p>

        <p>As an example, if you want to use a CSS class for night mode, it could look like:</p>

        <pre><code>@custom-selector :--night-mode .night-mode;</code></pre>

        <p>And if you want to use custom attributes for advanced settings, it could look like:</p>

        <pre><code>@custom-selector :--advanced-settings [data-settings="advanced"];</code></pre>

        <p>Both would then have to be appended to <code>html</code> at runtime.</p>

		<p>Once again, you must rebuild <code>dist</code> stylesheets.</p>
      </section>

      <section id="add-and-remove-modules" class="level3">
        <h3 class="sigil_not_in_toc">Add and remove modules</h3>

        <p>We have to add and remove modules depending on the language/script of the publication so this need is covered out of the box.</p>

        <p>In the <code>css/src</code> folder, you’ll find all the needed stylesheets you will process to <code>css/dist</code>. Those stylesheets contain a list of imports e.g. for <code>ReadiumCSS-before.css</code>:</p>

        <pre><code>@import "../ReadiumCSS-config.css"; 
@import "modules/ReadiumCSS-base.css"; 
@import "modules/ReadiumCSS-day_mode.css"; 
@import "modules/ReadiumCSS-fonts.css"; 
@import "modules/ReadiumCSS-html5patch.css"; 
@import "modules/ReadiumCSS-safeguards.css";</code></pre>

        <p>As a consequence, modules you want to use have to be listed in those <code>-before</code> and <code>-after</code> files. Then rebuild them using PostCSS.</p>

        <p>Additional user settings MUST be added to the <code>user-settings-submodules</code> folder, and make the required flag clear, if applicable.</p>

        <p>Please remember to take the cascade into account, as issues might arise just because the order has been changed or modules moved from <code>-before</code> to <code>-after</code> – in which case we won’t be able to reproduce and debug an issue if we don’t know this important detail. See <a href="../Text/Section-006.xhtml">Stylesheets order doc</a> for further details.</p>
      </section>

      <section id="reading-system-variables" class="level3">
        <h3 class="sigil_not_in_toc">Reading System variables</h3>

        <p>If you want to change the name of <code>--RS__</code> prefixed variables, you will have to change it in every module.</p>
      </section>

    <section id="build-dist-stylesheets" class="level2">
      <h2 id="sigil_toc_id_59">Build dist stylesheets</h2>

      <p>First, please make sure you have node.js installed. If you don’t, go <a href="https://nodejs.org/en/">download it on the official page</a>.</p>

      <p>Then navigate to the <code>readium-css</code> folder in your terminal and type:</p>

      <pre><code>npm install</code></pre>

      <p>This will install all dependencies needed to build <code>dist</code> stylesheets.</p>

      <p>Once you have customized <code>src</code> files, in the terminal type:</p>

      <pre><code>npm run-script build</code></pre>

      <p>This will rebuild all <code>dist</code> stylesheets in their specific folder.</p>

      <section id="options" class="level3">
        <h3 class="sigil_not_in_toc">Options</h3>

        <p>Other scripts are available:</p>

        <ul>
          <li><code>build:ltr</code> for default stylesheets (Left to Right);</li>

          <li><code>build:rtl</code> for Right to Left stylesheets;</li>

          <li><code>build:cjk</code> for CJK scripts;</li>

          <li><code>build:vertical</code> for CJK and the Mongolian scripts in vertical writing.</li>
        </ul>
      </section>

      <section id="additional-info" class="level3">
        <h3 class="sigil_not_in_toc">Additional info</h3>

        <p>Further details about the build and test processes can be found in <a href="../Text/Section-022.xhtml">the npm doc</a>.</p>
      </section>
    </section>

      <section id="user-settings-variables" class="level3">
        <h3 class="sigil_not_in_toc">User settings variables</h3>

        <p>If you want to change the name of <code>--USER__</code> prefixed variables, you will have to change it in every module.</p>
      </section>
    </section>

    <section id="manage-user-settings" class="level2">
      <h2 id="sigil_toc_id_166">Manage User Settings</h2>

      <p>Currently, user settings are managed by setting CSS variables at the <code>:root</code> level (<code>html</code> element).</p>

      <section id="flags" class="level3">
        <h3 class="sigil_not_in_toc">Flags</h3>

        <p>At the top of each user settings submodule, you will find the required flag for the preference.</p>

		<p>This flag is needed for the setting to work.</p>
      </section>

      <section id="user-variables" class="level3">
        <h3 class="sigil_not_in_toc">User variables</h3>

        <p>All settings can be set using <code>--USER__</code> prefixed variables. Set those properties for <code>html</code> and the cascade will automatically do its job.</p>

        <p>To set a variable:</p>

        <pre><code>var root = document.documentElement || document.getElementById("iframe-wrapper").contentWindow.document.documentElement; 
root.style.setProperty("--USER__var", "value");</code></pre>

        <p>To remove a variable:</p>

        <pre><code>var root = document.documentElement || document.getElementById("iframe-wrapper").contentWindow.document.documentElement; 
root.style.removeProperty("--USER__var");</code></pre>

        <p>Please note you must implement a fallback strategy if you want to support Internet Explorer 11 and early versions of Microsoft Edge.</p>
      </section>

      <section id="examples" class="level3">
        <h3 class="sigil_not_in_toc">Examples</h3>

        <section id="changing-hyphenation-and-justification" class="level4">
          <h4 class="sigil_not_in_toc">Changing hyphenation and justification</h4>

          <pre><code>root.style.setProperty("--USER__advancedSettings", "readium-advanced-on"); 
root.style.setProperty("--USER__textAlign", "justify"); 
root.style.setProperty("--USER__bodyHyphens", "auto");</code></pre>

          <p>Of course this example is simplistic. You could for instance create an helper to set multiple properties at once.</p>
        </section>

        <section id="changing-the-type-scale" class="level4">
          <h4 class="sigil_not_in_toc">Changing the type scale</h4>

          <p>You might want to change the type scale in order to adjust the <code>font-size</code> of all elements to the size of the screen and the global <code>font-size</code> set by the user. It can indeed help solve overflow issues for long words in headings, ridiculously large sizes, etc.</p>

          <pre><code>root.style.setProperty("--USER__advancedSettings", "readium-advanced-on"); 
root.style.setProperty("--USER__typeScale", "1.067");</code></pre>
        </section>
      </section>
    </section>

    <section id="create-themes" class="level2">
      <h2 id="sigil_toc_id_167">Create Themes</h2>

      <p>In this model, themes are a set of user settings you can store and retrieve. Add the properties to <code>html</code> and you get a theme.</p>

      <p>Check the <a href="../Text/Section-012.xhtml">User Preferences doc</a> for a list of available user variables.</p>
    </section>
  </section>
</body>
</html>